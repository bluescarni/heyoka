# Remember several build options.
set(heyoka_WITH_SLEEF @HEYOKA_WITH_SLEEF@)
set(heyoka_WITH_MPPP @HEYOKA_WITH_MPPP@)
set(heyoka_WITH_REAL128 @_HEYOKA_WITH_REAL128@)
set(heyoka_WITH_REAL @_HEYOKA_WITH_REAL@)
set(heyoka_ABI_VERSION @HEYOKA_ABI_VERSION@)

# Record the LLVM major version against which
# heyoka was built.
set(heyoka_LLVM_VERSION_MAJOR @LLVM_VERSION_MAJOR@)

# Record also the versions of the public dependencies.
set(heyoka_Boost_VERSION @Boost_VERSION@)
set(heyoka_fmt_VERSION @fmt_VERSION@)
if(${heyoka_WITH_MPPP})
    set(heyoka_mp++_VERSION @mp++_VERSION@)
endif()

# Mandatory public dependencies on Boost and fmt.

# NOTE: we look for Boost in CONFIG mode first, as that has become the official supported way
# of locating Boost in recent Boost/CMake versions. If we fail, we try again in
# MODULE mode as last resort.
find_package(Boost @_HEYOKA_MIN_BOOST_VERSION@ QUIET COMPONENTS serialization CONFIG)
if(NOT ${Boost_FOUND})
    find_package(Boost @_HEYOKA_MIN_BOOST_VERSION@ QUIET MODULE COMPONENTS serialization)
endif()
if(NOT ${Boost_FOUND})
    message(FATAL_ERROR "Could not locate Boost in either CONFIG or MODULE mode.")
endif()

find_package(fmt REQUIRED CONFIG)
if(${fmt_VERSION_MAJOR} VERSION_LESS @_HEYOKA_MIN_SUPPORTED_FMT_VERSION@ OR
   ${fmt_VERSION_MAJOR} VERSION_GREATER @_HEYOKA_MAX_SUPPORTED_FMT_VERSION@)
   message(FATAL_ERROR "The supported fmt versions are in the range [@_HEYOKA_MIN_SUPPORTED_FMT_VERSION@, @_HEYOKA_MAX_SUPPORTED_FMT_VERSION@], but version ${fmt_VERSION_MAJOR} was found instead.")
endif()

# Optional public dependency on mp++.
if(${heyoka_WITH_MPPP})
    find_package(mp++ REQUIRED CONFIG)
    if(${mp++_VERSION_MAJOR} VERSION_LESS @_HEYOKA_MIN_SUPPORTED_MPPP_VERSION@ OR
       ${mp++_VERSION_MAJOR} VERSION_GREATER @_HEYOKA_MAX_SUPPORTED_MPPP_VERSION@)
        message(FATAL_ERROR "The supported mp++ versions are in the range [@_HEYOKA_MIN_SUPPORTED_MPPP_VERSION@, @_HEYOKA_MAX_SUPPORTED_MPPP_VERSION@], but version ${mp++_VERSION_MAJOR} was found instead.")
    endif()

    # NOTE: this is necessary for the serialisation of several classes.
    if(NOT mp++_WITH_BOOST_S11N)
        message(FATAL_ERROR "mp++ must be installed with support for Boost.serialization.")
    endif()

    # NOTE: needed for formatting numbers.
    if(NOT mp++_WITH_FMT)
        message(FATAL_ERROR "mp++ must be installed with support for fmt.")
    endif()
endif()

# Get current dir.
get_filename_component(_HEYOKA_CONFIG_SELF_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)

include(${_HEYOKA_CONFIG_SELF_DIR}/heyoka_export.cmake)

# Clean up.
unset(_HEYOKA_CONFIG_SELF_DIR)
