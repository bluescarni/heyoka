// Copyright 2020, 2021, 2022, 2023 Francesco Biscani (bluescarni@gmail.com), Dario Izzo (dario.izzo@gmail.com)
//
// This file is part of the heyoka library.
//
// This Source Code Form is subject to the terms of the Mozilla
// Public License v. 2.0. If a copy of the MPL was not distributed
// with this file, You can obtain one at http://mozilla.org/MPL/2.0/.

#ifndef HEYOKA_CONFIG_HPP
#define HEYOKA_CONFIG_HPP

// clang-format off
#define HEYOKA_VERSION_STRING "@heyoka_VERSION@"
#define HEYOKA_VERSION_MAJOR @heyoka_VERSION_MAJOR@
#define HEYOKA_VERSION_MINOR @heyoka_VERSION_MINOR@
#define HEYOKA_VERSION_PATCH @heyoka_VERSION_PATCH@
#define HEYOKA_ABI_VERSION @HEYOKA_ABI_VERSION@
// clang-format on

#cmakedefine HEYOKA_WITH_MPPP
#cmakedefine HEYOKA_WITH_SLEEF
#cmakedefine HEYOKA_BUILD_STATIC_LIBRARY

#if defined(HEYOKA_WITH_MPPP)

#include <mp++/config.hpp>

#if !defined(MPPP_WITH_BOOST_S11N)

#error mp++ must be configured with support for Boost.serialization.

#endif

#if defined(MPPP_WITH_QUADMATH)

#define HEYOKA_HAVE_REAL128

#endif

#if defined(MPPP_WITH_MPFR)

#define HEYOKA_HAVE_REAL

#endif

#endif

// NOTE: handy Boost library for this since 1.73:
// https://www.boost.org/doc/libs/1_73_0/libs/predef/doc/index.html
#if defined(_ARCH_PPC) || defined(_M_PPC)

#define HEYOKA_ARCH_PPC

#endif

#if defined(__arm__) || defined(_M_ARM) || defined(__arm) || defined(__aarch64__)

#define HEYOKA_ARCH_ARM

#endif

// Maximum number of blocks that can be processed in parallel
// when computing the Taylor derivatives in parallel mode.
#define HEYOKA_CM_PAR_MAX_INVOKE_N 20

// Setup of the ABI versioning and tagging
// machinery.

#if defined(__GNUC__) || defined(__clang__)

#define HEYOKA_ABI_TAG_ATTR __attribute__((abi_tag))

#else

#define HEYOKA_ABI_TAG_ATTR

#endif

// clang-format off
#define HEYOKA_BEGIN_NAMESPACE                                                                                         \
    namespace heyoka                                                                                                   \
    {                                                                                                                  \
    inline namespace v@HEYOKA_ABI_VERSION@ HEYOKA_ABI_TAG_ATTR                                                         \
    {

#define HEYOKA_END_NAMESPACE                                                                                           \
    }                                                                                                                  \
    }
// clang-format on

#endif
